---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: playgrounds.inference.llmaz.io
spec:
  group: inference.llmaz.io
  names:
    kind: Playground
    listKind: PlaygroundList
    plural: playgrounds
    singular: playground
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Playground is the Schema for the playgrounds API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: PlaygroundSpec defines the desired state of Playground
            properties:
              backendConfig:
                description: |-
                  BackendConfig represents the inference backend configuration
                  under the hood, e.g. vLLM, which is the default backend.
                properties:
                  args:
                    description: Args represents the arguments passed to the backend.
                    items:
                      type: string
                    type: array
                  envs:
                    description: Envs represents the environments set to the container.
                    items:
                      $ref: '#/definitions/k8s.io~1api~1core~1v1~0EnvVar'
                    type: array
                  name:
                    default: vllm
                    description: Name represents the inference backend under the hood,
                      e.g. vLLM.
                    enum:
                    - vllm
                    type: string
                  resources:
                    description: |-
                      Resources represents the resource requirements for backend, like cpu/mem,
                      accelerators like GPU should not be defined here, but at the Model flavors,
                      or the same accelerator requirements defined there will be covered and
                      the workload will lose the fungibility capacity.
                    properties:
                      limits:
                        $ref: '#/definitions/k8s.io~1api~1core~1v1~0ResourceList'
                        description: |-
                          Limits describes the maximum amount of compute resources allowed.
                          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      requests:
                        $ref: '#/definitions/k8s.io~1api~1core~1v1~0ResourceList'
                        description: |-
                          Requests describes the minimum amount of compute resources required.
                          If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                          otherwise to an implementation-defined value. Requests cannot exceed Limits.
                          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                    type: object
                  version:
                    description: |-
                      Version represents the backend version if you want a different one
                      from the default version.
                    type: string
                type: object
              modelClaim:
                description: |-
                  ModelClaim represents one modelClaim, it's a simple configuration
                  compared to multiModelsClaims only work for one model and one claim.
                  ModelClaim and multiModelsClaims are exclusive configured.
                  Note: properties (nodeSelectors, resources, e.g.) of the model flavors
                  will be applied to the workload if not exist.
                properties:
                  inferenceFlavors:
                    description: |-
                      InferenceFlavors represents a list of flavors with fungibility supports
                      to serve the model. The flavor names should be a subset of the model
                      configured flavors. If not set, will use the model configured flavors.
                    items:
                      type: string
                    type: array
                  modelName:
                    description: |-
                      ModelName represents a list of models, there maybe multiple models here
                      to support state-of-the-art technologies like speculative decoding.
                    type: string
                type: object
              multiModelsClaims:
                description: |-
                  MultiModelsClaims represents multiple modelClaim, which is useful when different
                  sub-workload has different accelerator requirements, like the state-of-the-art
                  technology called splitwise, the workload template is shared by both.
                  ModelClaim and multiModelsClaims are exclusive configured.
                items:
                  description: |-
                    MultiModelsClaim represents the references to multiple models.
                    It's an advanced and more complicated config comparing to modelClaim.
                  properties:
                    inferenceFlavors:
                      description: |-
                        InferenceFlavors represents a list of flavors with fungibility supported
                        to serve the model.
                        - If not set, always apply with the 0-index model by default.
                        - If set, will lookup the flavor names following the model orders.
                      items:
                        type: string
                      type: array
                    modelNames:
                      description: |-
                        ModelNames represents a list of models, there maybe multiple models here
                        to support state-of-the-art technologies like speculative decoding.
                      items:
                        type: string
                      minItems: 1
                      type: array
                    rate:
                      description: |-
                        Rate works only when multiple claims declared, it represents the replicas rates of
                        the sub-workload, like when claim1.rate:claim2.rate = 1:2 and 3 replicas defined in
                        workload, then sub-workload1 will have 1 replica, and sub-workload2 will have 2 replicas.
                        This is mostly designed for state-of-the-art technology called splitwise, the prefill
                        and decode phase will be separated and requires different accelerators.
                        The sum of the rates should be divisible by replicas.
                      format: int32
                      type: integer
                  type: object
                type: array
              replicas:
                default: 1
                description: Replicas represents the replica number of inference workloads.
                format: int32
                type: integer
            type: object
          status:
            description: PlaygroundStatus defines the observed state of Playground
            properties:
              conditions:
                description: Conditions represents the Inference condition.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
