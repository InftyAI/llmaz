/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "inftyai.com/llmaz/api/core/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// FlavorApplyConfiguration represents a declarative configuration of the Flavor type for use
// with apply.
type FlavorApplyConfiguration struct {
	Name         *v1alpha1.FlavorName `json:"name,omitempty"`
	Requests     *v1.ResourceList     `json:"requests,omitempty"`
	NodeSelector map[string]string    `json:"nodeSelector,omitempty"`
	Params       map[string]string    `json:"params,omitempty"`
}

// FlavorApplyConfiguration constructs a declarative configuration of the Flavor type for use with
// apply.
func Flavor() *FlavorApplyConfiguration {
	return &FlavorApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *FlavorApplyConfiguration) WithName(value v1alpha1.FlavorName) *FlavorApplyConfiguration {
	b.Name = &value
	return b
}

// WithRequests sets the Requests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Requests field is set to the value of the last call.
func (b *FlavorApplyConfiguration) WithRequests(value v1.ResourceList) *FlavorApplyConfiguration {
	b.Requests = &value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *FlavorApplyConfiguration) WithNodeSelector(entries map[string]string) *FlavorApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithParams puts the entries into the Params field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Params field,
// overwriting an existing map entries in Params field with the same key.
func (b *FlavorApplyConfiguration) WithParams(entries map[string]string) *FlavorApplyConfiguration {
	if b.Params == nil && len(entries) > 0 {
		b.Params = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Params[k] = v
	}
	return b
}
