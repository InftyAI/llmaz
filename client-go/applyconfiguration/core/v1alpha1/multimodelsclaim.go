/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "inftyai.com/llmaz/api/core/v1alpha1"
)

// MultiModelsClaimApplyConfiguration represents a declarative configuration of the MultiModelsClaim type for use
// with apply.
type MultiModelsClaimApplyConfiguration struct {
	ModelNames       []v1alpha1.ModelName  `json:"modelNames,omitempty"`
	InferenceFlavors []v1alpha1.FlavorName `json:"inferenceFlavors,omitempty"`
	Rate             *int32                `json:"rate,omitempty"`
}

// MultiModelsClaimApplyConfiguration constructs a declarative configuration of the MultiModelsClaim type for use with
// apply.
func MultiModelsClaim() *MultiModelsClaimApplyConfiguration {
	return &MultiModelsClaimApplyConfiguration{}
}

// WithModelNames adds the given value to the ModelNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ModelNames field.
func (b *MultiModelsClaimApplyConfiguration) WithModelNames(values ...v1alpha1.ModelName) *MultiModelsClaimApplyConfiguration {
	for i := range values {
		b.ModelNames = append(b.ModelNames, values[i])
	}
	return b
}

// WithInferenceFlavors adds the given value to the InferenceFlavors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InferenceFlavors field.
func (b *MultiModelsClaimApplyConfiguration) WithInferenceFlavors(values ...v1alpha1.FlavorName) *MultiModelsClaimApplyConfiguration {
	for i := range values {
		b.InferenceFlavors = append(b.InferenceFlavors, values[i])
	}
	return b
}

// WithRate sets the Rate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Rate field is set to the value of the last call.
func (b *MultiModelsClaimApplyConfiguration) WithRate(value int32) *MultiModelsClaimApplyConfiguration {
	b.Rate = &value
	return b
}
