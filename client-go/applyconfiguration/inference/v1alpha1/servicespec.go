/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "inftyai.com/llmaz/client-go/applyconfiguration/core/v1alpha1"
	v1 "sigs.k8s.io/lws/api/leaderworkerset/v1"
)

// ServiceSpecApplyConfiguration represents a declarative configuration of the ServiceSpec type for use
// with apply.
type ServiceSpecApplyConfiguration struct {
	MultiModelsClaims []v1alpha1.MultiModelsClaimApplyConfiguration `json:"multiModelsClaims,omitempty"`
	WorkloadTemplate  *v1.LeaderWorkerSetSpec                       `json:"workloadTemplate,omitempty"`
	ElasticConfig     *ElasticConfigApplyConfiguration              `json:"elasticConfig,omitempty"`
}

// ServiceSpecApplyConfiguration constructs a declarative configuration of the ServiceSpec type for use with
// apply.
func ServiceSpec() *ServiceSpecApplyConfiguration {
	return &ServiceSpecApplyConfiguration{}
}

// WithMultiModelsClaims adds the given value to the MultiModelsClaims field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MultiModelsClaims field.
func (b *ServiceSpecApplyConfiguration) WithMultiModelsClaims(values ...*v1alpha1.MultiModelsClaimApplyConfiguration) *ServiceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMultiModelsClaims")
		}
		b.MultiModelsClaims = append(b.MultiModelsClaims, *values[i])
	}
	return b
}

// WithWorkloadTemplate sets the WorkloadTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadTemplate field is set to the value of the last call.
func (b *ServiceSpecApplyConfiguration) WithWorkloadTemplate(value v1.LeaderWorkerSetSpec) *ServiceSpecApplyConfiguration {
	b.WorkloadTemplate = &value
	return b
}

// WithElasticConfig sets the ElasticConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ElasticConfig field is set to the value of the last call.
func (b *ServiceSpecApplyConfiguration) WithElasticConfig(value *ElasticConfigApplyConfiguration) *ServiceSpecApplyConfiguration {
	b.ElasticConfig = value
	return b
}
