/*
Copyright 2025 The InftyAI Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	corev1alpha1 "github.com/inftyai/llmaz/client-go/applyconfiguration/core/v1alpha1"
)

// PlaygroundSpecApplyConfiguration represents a declarative configuration of the PlaygroundSpec type for use
// with apply.
type PlaygroundSpecApplyConfiguration struct {
	Replicas             *int32                                      `json:"replicas,omitempty"`
	ModelClaim           *corev1alpha1.ModelClaimApplyConfiguration  `json:"modelClaim,omitempty"`
	ModelClaims          *corev1alpha1.ModelClaimsApplyConfiguration `json:"modelClaims,omitempty"`
	BackendRuntimeConfig *BackendRuntimeConfigApplyConfiguration     `json:"backendRuntimeConfig,omitempty"`
	ElasticConfig        *ElasticConfigApplyConfiguration            `json:"elasticConfig,omitempty"`
}

// PlaygroundSpecApplyConfiguration constructs a declarative configuration of the PlaygroundSpec type for use with
// apply.
func PlaygroundSpec() *PlaygroundSpecApplyConfiguration {
	return &PlaygroundSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *PlaygroundSpecApplyConfiguration) WithReplicas(value int32) *PlaygroundSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithModelClaim sets the ModelClaim field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ModelClaim field is set to the value of the last call.
func (b *PlaygroundSpecApplyConfiguration) WithModelClaim(value *corev1alpha1.ModelClaimApplyConfiguration) *PlaygroundSpecApplyConfiguration {
	b.ModelClaim = value
	return b
}

// WithModelClaims sets the ModelClaims field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ModelClaims field is set to the value of the last call.
func (b *PlaygroundSpecApplyConfiguration) WithModelClaims(value *corev1alpha1.ModelClaimsApplyConfiguration) *PlaygroundSpecApplyConfiguration {
	b.ModelClaims = value
	return b
}

// WithBackendRuntimeConfig sets the BackendRuntimeConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackendRuntimeConfig field is set to the value of the last call.
func (b *PlaygroundSpecApplyConfiguration) WithBackendRuntimeConfig(value *BackendRuntimeConfigApplyConfiguration) *PlaygroundSpecApplyConfiguration {
	b.BackendRuntimeConfig = value
	return b
}

// WithElasticConfig sets the ElasticConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ElasticConfig field is set to the value of the last call.
func (b *PlaygroundSpecApplyConfiguration) WithElasticConfig(value *ElasticConfigApplyConfiguration) *PlaygroundSpecApplyConfiguration {
	b.ElasticConfig = value
	return b
}
