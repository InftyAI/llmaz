/*
Copyright 2025 The InftyAI Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package metricsAggregator

import (
	"context"
	"fmt"
	"sync"
	"sync/atomic"
	"time"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/inftyai/router/pkg/backend"
	"github.com/inftyai/router/pkg/store"
	"github.com/inftyai/router/pkg/util"
)

func DefaultKeyFunc(obj metav1.Object) string {
	return obj.GetNamespace() + "/" + obj.GetName()
}

// Aggregator is the component managing all the metrics synchronization tasks.
// TODO: add metrics, like counter.
type Aggregator struct {
	// PodMap stores all the PodWrappers, the key is generated by KeyFunc,
	// the value is the PodWrapper.
	// TODO: Will all Pods share the same Map lead to performance issue once the number of pods is large.
	PodMap sync.Map
	// KeyFunc represents the function to generate a key for the pod.
	KeyFunc func(obj metav1.Object) string

	// The system context controls when to stop all the goroutines.
	ctx context.Context
	// interval represents the how often to request the metrics from the pods.
	interval time.Duration
	// counter counts the number of pods in PodMap.
	counter atomic.Int32
	// store is the backend store to save the metrics.
	store store.Store
}

func (a *Aggregator) AddPod(pod *corev1.Pod) {
	podName := a.KeyFunc(pod)
	modelName := pod.Namespace + "/" + pod.Labels[util.ModelNameLabelKey]
	wrapper := newPodWrapper(a.ctx, podName, modelName, pod, a.store)

	if _, ok := a.GetPod(podName); !ok {
		wrapper.once.Do(func() {
			go wrapper.syncMetricsInLoop(a.interval)
		})
		a.PodMap.Store(podName, wrapper)
		a.counter.Add(1)
		return
	}

	// Always replace with the latest one, one reason is we need to use the
	// latest Pod IP.
	a.PodMap.Store(podName, wrapper)
}

func (a *Aggregator) GetPod(name string) (*corev1.Pod, bool) {
	elem, ok := a.PodMap.Load(name)
	if !ok {
		return nil, false
	}
	return elem.(*PodWrapper).pod, true
}

func (a *Aggregator) DeletePod(name string) {
	if wrapper, ok := a.PodMap.Load(name); ok {
		w := wrapper.(*PodWrapper)
		if err := w.stop(); err != nil {
			fmt.Printf("failed to stop the pod wrapper: %v", err)
		}
		a.PodMap.Delete(name)
		a.counter.Add(-1)
	}
}

func (a *Aggregator) Len() int32 {
	return a.counter.Load()
}

// TODO: make the interval configurable via configmap.
func NewAggregator(ctx context.Context, interval time.Duration, store store.Store) *Aggregator {
	return &Aggregator{
		ctx:      ctx, // We only have one aggregator, so it's ok to use the context directly.
		KeyFunc:  DefaultKeyFunc,
		interval: interval,
		store:    store,
	}
}

type PodWrapper struct {
	// ctx is the root context of the podWrapper.
	ctx context.Context
	// cancelFunc is the function to cancel the context of the background goroutine.
	cancelFunc context.CancelFunc
	// name is the identifier of podWrapper, the name is generated by aggregator's KeyFunc.
	name string
	// modelName is the name of model service this pod is running, the name is extracted
	// from the pod labels, looks like namespace/modelName.
	//
	// We assumed that one namespace should only have one model service with the name.
	modelName string
	// Pod is the pod object.
	// TODO: should we store the whole Pod object?
	pod *corev1.Pod
	// once ensures we only run the background goroutine for only once.
	once sync.Once
	// store used to save the metrics.
	store store.Store
}

func (w *PodWrapper) syncMetricsInLoop(interval time.Duration) {
	ticket := time.NewTicker(interval)
	defer ticket.Stop()

	for {
		select {
		case <-ticket.C:
			ep := metricEndpoint(w.pod)
			metrics, err := backend.QueryMetrics(w.name, ep)
			if err != nil {
				fmt.Printf("failed to query metrics from %s: %v, but continue.", ep, err)
				continue
			}
			if err := w.saveMetrics(metrics); err != nil {
				fmt.Printf("failed to save metrics to store: %v, but continue.", err)
				continue
			}
		case <-w.ctx.Done():
			fmt.Println("context done, stop the goroutine.")
			return
		}

		// Avoid to count the request ping-pong time.
		ticket.Reset(interval)
	}
}

func (w *PodWrapper) saveMetrics(metrics store.Indicator) error {
	return w.store.Insert(w.ctx, w.name, w.modelName, metrics)
}

func (w *PodWrapper) stop() error {
	// Stop the background goroutine first.
	w.cancelFunc()
	return w.store.Remove(w.ctx, w.name, w.modelName)
}

func newPodWrapper(ctx context.Context, podName string, modelName string, pod *corev1.Pod, store store.Store) *PodWrapper {
	ctx, cancel := context.WithCancel(ctx)
	return &PodWrapper{
		ctx:        ctx,
		cancelFunc: cancel,
		name:       podName,
		modelName:  modelName,
		pod:        pod,
		store:      store,
	}
}

// TODO: The http port is hardcoded now.
func metricEndpoint(pod *corev1.Pod) string {
	return "http://" + pod.Status.PodIP + ":8080"
}
