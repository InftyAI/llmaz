/*
Copyright 2025 The InftyAI Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package aggregator

import (
	"sync"
	"sync/atomic"

	corev1 "k8s.io/api/core/v1"
)

func DefaultKeyFunc(pod *corev1.Pod) string {
	return pod.Namespace + "/" + pod.Name
}

// Aggregator is the component managing all the metrics synchronization tasks.
// TODO: add metrics, like counter.
type Aggregator struct {
	// PodMap stores all the PodWrappers, the key is generated by KeyFunc,
	// the value is the PodWrapper.
	// TODO: Will all Pods share the same Map lead to performance issue once the number of pods is large.
	PodMap sync.Map
	// counter counts the number of pods in PodMap.
	counter atomic.Int32
	// KeyFunc represents the function to generate a key for the pod.
	KeyFunc func(pod *corev1.Pod) string
}

type PodWrapper struct {
	// nsName is a string looks like "namespace/podName"
	nsName string
	// Pod is the pod object.
	// TODO: should we store the whole Pod object?
	pod *corev1.Pod
}

func NewAggregator() *Aggregator {
	return &Aggregator{
		KeyFunc: DefaultKeyFunc,
	}
}

func (a *Aggregator) AddPod(pod *corev1.Pod) {
	name := a.KeyFunc(pod)
	wrapper := &PodWrapper{nsName: name, pod: pod}

	if _, ok := a.GetPod(name); !ok {
		a.PodMap.Store(name, wrapper)
		a.counter.Add(1)
		return
	}

	// Always replace with the latest one, one reason is we need to use the
	// latest Pod IP.
	a.PodMap.Store(name, wrapper)
}

func (a *Aggregator) GetPod(nsName string) (*corev1.Pod, bool) {
	elem, ok := a.PodMap.Load(nsName)
	if !ok {
		return nil, false
	}
	return elem.(*PodWrapper).pod, true
}

func (a *Aggregator) DeletePod(nsName string) {
	a.PodMap.Delete(nsName)
	a.counter.Add(-1)
}

func (a *Aggregator) Len() int32 {
	return a.counter.Load()
}
